"use client"
import React, { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react'

/**
 * üèÜ Context para manejar el cambio din√°mico de t√≠tulos cuando se reclama un premio
 * 
 * FUNCIONALIDAD:
 * - ‚úÖ Cada combinaci√≥n sede + tratamiento tiene su propio estado independiente
 * - ‚úÖ Persiste el estado en localStorage para mantener t√≠tulos cambiados entre sesiones
 * - ‚úÖ Permite resetear premios reclamados por combinaci√≥n espec√≠fica
 * 
 * USO T√çPICO:
 * ```tsx
 * // En una p√°gina espec√≠fica
 * <TitleProvider sede="Jes√∫s Mar√≠a" tratamiento="VPH">
 *   <HeroContact title="¬øTienes verrugas?" subtitle="Podr√≠as tener VPH" />
 *   <SpinWheelTrigger />
 * </TitleProvider>
 * 
 * // En el componente HeroContact
 * const { hasClaimedPrize } = useTitleContext();
 * const displayTitle = hasClaimedPrize ? "¬°Felicidades! üéâ" : title;
 * ```
 */

// CONTEXTO GLOBAL PARA MANEJO DE T√çTULO DIN√ÅMICO SEG√öN LA RULETA
// ---------------------------------------------------------------
// Este contexto permite que el t√≠tulo principal de cada landing cambie din√°micamente
// cuando el usuario gana en la ruleta. El estado se guarda en localStorage de forma
// independiente para cada combinaci√≥n sede + tratamiento.
//
// USO:
// - El provider debe envolver cada p√°gina y recibir props de sede y tratamiento.
// - El hook useTitleContext() permite acceder y modificar el estado desde cualquier componente.
// - claimPrize() y resetPrize() afectan solo la combinaci√≥n actual.

interface TitleContextType {
  /** ¬øSe ha reclamado el premio en esta combinaci√≥n sede + tratamiento? */
  hasClaimedPrize: boolean // ¬øYa reclam√≥ el premio en esta p√°gina?
  /** ¬øSe ha reclamado el premio en esta combinaci√≥n sede + tratamiento justo despu√©s de ganar? */
  justClaimedPrize: boolean // ¬øSe ha reclamado el premio justo despu√©s de ganar?
  /** Funci√≥n para marcar premio como reclamado */
  claimPrize: (sede?: string, tratamiento?: string) => void // Marca como reclamado
  /** Funci√≥n para resetear el premio reclamado */
  resetPrize: (sede?: string, tratamiento?: string) => void // Resetea el estado
}

interface TitleProviderProps {
  children: ReactNode
  /** Sede actual (ej: "Jes√∫s Mar√≠a", "Golf", "Sur") */
  sede?: string // Sede actual (ej: "Jes√∫s Mar√≠a")
  /** Tratamiento actual (ej: "VPH", "Prostatitis", "Ondas de Choque") */
  tratamiento?: string // Tratamiento actual (ej: "VPH")
}

// Contexto React
const TitleContext = createContext<TitleContextType | undefined>(undefined)

// Provider global para el contexto de t√≠tulo
export function TitleProvider({ children, sede, tratamiento }: TitleProviderProps) {
  const [hasClaimedPrize, setHasClaimedPrize] = useState(false)
  const [justClaimedPrize, setJustClaimedPrize] = useState(false)
  const [isHydrated, setIsHydrated] = useState(false)

  /**
   * üîë Genera clave √∫nica para localStorage de premios reclamados
   * 
   * FORMATO: "insalud_prize_claimed_{sede}_{tratamiento}"
   * EJEMPLOS:
   * - "insalud_prize_claimed_jes√∫s_mar√≠a_vph"
   * - "insalud_prize_claimed_golf_prostatitis"
   * - "insalud_prize_claimed_sur_ondas_de_choque"
   * 
   * NOTA: Separada de la clave de la ruleta para permitir diferentes comportamientos
   */
  const getStorageKey = useCallback((sedeParam?: string, tratamientoParam?: string) => {
    const currentSede = sedeParam || sede || 'default';
    const currentTratamiento = tratamientoParam || tratamiento || 'default';
    return `insalud_prize_claimed_${currentSede.toLowerCase().replace(/\s+/g, '_')}_${currentTratamiento.toLowerCase().replace(/\s+/g, '_')}`;
  }, [sede, tratamiento])

  /**
   * üîç Efecto de hidrataci√≥n - se ejecuta solo en el cliente
   */
  useEffect(() => {
    setIsHydrated(true);
  }, []);

  /**
   * üîç Verifica al montar el componente si ya se reclam√≥ el premio
   * 
   * Esto permite que los t√≠tulos cambien autom√°ticamente si el usuario
   * ya reclam√≥ el premio en una sesi√≥n anterior
   */
  useEffect(() => {
    if (isHydrated && typeof window !== 'undefined') {
      const key = getStorageKey();
      const claimed = localStorage.getItem(key) === 'true';
      setHasClaimedPrize(claimed);
      setJustClaimedPrize(false); // Solo es true justo despu√©s de ganar
    }
  }, [sede, tratamiento, getStorageKey, isHydrated]);

  /**
   * üèÜ Marca el premio como reclamado para una combinaci√≥n espec√≠fica
   * 
   * @param sedeParam - Sede espec√≠fica (opcional, usa la del provider por defecto)
   * @param tratamientoParam - Tratamiento espec√≠fico (opcional, usa el del provider por defecto)
   */
  const claimPrize = (sedeParam?: string, tratamientoParam?: string) => {
    const key = getStorageKey(sedeParam, tratamientoParam);
    localStorage.setItem(key, 'true');
    setHasClaimedPrize(true);
    setJustClaimedPrize(true); // Solo true inmediatamente despu√©s de ganar
  }

  /**
   * üîÑ Resetea el premio reclamado para una combinaci√≥n espec√≠fica
   * 
   * @param sedeParam - Sede espec√≠fica (opcional, usa la del provider por defecto)
   * @param tratamientoParam - Tratamiento espec√≠fico (opcional, usa el del provider por defecto)
   */
  const resetPrize = (sedeParam?: string, tratamientoParam?: string) => {
    const key = getStorageKey(sedeParam, tratamientoParam);
    localStorage.removeItem(key);
    setHasClaimedPrize(false);
    setJustClaimedPrize(false);
  }

  return (
    <TitleContext.Provider value={{ hasClaimedPrize, justClaimedPrize, claimPrize, resetPrize }}>
      {children}
    </TitleContext.Provider>
  )
}

// Hook para consumir el contexto
export function useTitleContext() {
  const context = useContext(TitleContext)
  if (context === undefined) {
    throw new Error('useTitleContext must be used within a TitleProvider')
  }
  return context
} 